{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\n\n\n\nResearchNet is a flexible, cloud-enabled back-end for Computer Assisted Self Interview (CASI) systems. \n\n\nFor the survey researcher, this platform provides a secure mechanism for managing enrollment, processing consent, and collecting the survey data. \n\n\nUnder the hood, ResearchNet is comprised of three software components:  a set of REST APIs for developers, a software development kit (SDK) supporting IOS, and a simple dashboard for monitoring the study progress.",
            "title": "Introduction"
        },
        {
            "location": "/#overview",
            "text": "ResearchNet is a flexible, cloud-enabled back-end for Computer Assisted Self Interview (CASI) systems.   For the survey researcher, this platform provides a secure mechanism for managing enrollment, processing consent, and collecting the survey data.   Under the hood, ResearchNet is comprised of three software components:  a set of REST APIs for developers, a software development kit (SDK) supporting IOS, and a simple dashboard for monitoring the study progress.",
            "title": "Overview"
        },
        {
            "location": "/background/",
            "text": "Background\n\n\nApple iOS currently controls a little over 43% of the US smartphone market, providing access to more than 79 million iPhone users in the US. The ResearchKit platform immediately garnered a great deal of interest within the biomedical research community.   \n\n\nAs exciting as this new framework is Apple provided no guidance on how the data collected was to be stored and managed.  This is where the Biomedical Data as a Service Internal Research and Development (IR&D) project comes in.  Designed and implmented by the Research Computing Division, this solution includes the following basic components: an iOS code library, a cloud-based data host, a service layer implementing data exchange application programming interfaces, and a dashboard UI for management.  Instrument developers simply include the iOS library in their IOS application code to connect to the data service via the REST based web API.  Study managers manage their datasets and perform exploratory analytics via the dashboard UI. The system design and implementation incorporates US legal and regulatory compliance with respect to data privacy and security. \n\n\nApple launched its ResearchKit framework for iOS on March 9, 2015. ResearchKit is an open source software framework designed to aid in the creation of mobile apps for biomedical and health research. ResearchKit simplifies construction of highly functional apps. Support is provided for various app modules, including informed consent, passive data collection, active tasks, surveys and data dashboards. Apple iOS currently controls a little over 43% of the US smartphone market, providing access to more than 79 million iPhone users in the US. The ResearchKit platform immediately garnered a great deal of interest within the biomedical research community.\n\n\nFive apps developed with ResearchKit were also released at the debut press event. In March Stanford University researchers found that 11,000 people had signed up for a cardiovascular study using Apple Inc.\u2019s ResearchKit, less than 24 hours after the iPhone tool was introduced. The Michael J. Fox Foundation for Parkinson\u2019s Research collaborated with nonprofit group Sage Bionetworks to develop The Parkinson\u2019s app, which had 5,589 consenting users with 24 hours of launch. These early results suggest a healthy future for biomedical research using data gathered from mobile apps, and for the ResearchKit framework. RCD has already developed a very simple ResearchKit app, but currently has no backend data service to securely receive and manage the data collected. Exhibit 1 is a screenshot of this example app. With our rich capabilities in health research, research data management, statistical analysis, and data sciences, we need to explore the potential of ResearchKit for our business. \n\n\nDeployed ResearchKit apps generate a great deal of data, presenting operational challenges for researchers.  Given the nature of the data, privacy and security concerns must be addressed with care. The ResearchKit framework provides no specific capabilities for dealing with these data, relying on built-in iOS functions. Apple offers no recommendations or backend service for storing, securing, managing and analyzing the data collected using ResearchKit apps. Researchers seeking to leverage this technology may not be able to easily develop deployable solutions without resolving significant technical challenges. \n\n\nThese challenges represent an opportunity for RTI to step forward with solutions. We propose that RTI build the tools and framework necessary to provide biomedical data management for ResearchKit apps as:\n\n\n\n\na capability offered to clients in the context of RTI-led biomedical research projects; and\n\n\nAs an RTI-managed service offered to clients conducting their own biomedical research.\n\n\n\n\nThe solution would include the following basic components: an iOS code library, a cloud-based data host, a service layer implementing data exchange APIs, and a dashboard UI for management.  Exhibit 2 is a simplified diagram showing the flow of data between ReseachKit applications, the proposed backend data service, and researchers. Implementers would include the iOS library in their app code, and connect to our data host via the service APIs.  Users would manage their datasets and perform exploratory analytics via the dashboard UI. The system design and implementation would incorporate US legal and regulatory compliance with respect to data privacy and security. \n\n\n\n\nThis project would build and demonstrate the feasibility of a service designed to gather and help analyze biomedical data from users of mobile apps developed using ResearchKit. This new capability would be a logical extension and modernization of our existing biomedical data collection, management, and research business. RTI currently cannot offer this capability to clients. \nThis new service will leverage the experience skills of our staff in research data center technologies and operations (e.g. research protocol design and oversight, human subjects research, data privacy and security, data collection and management, statistical analysis, data visualization), and should help generate business in those areas. In developing this service the project team will consult the RTI Center for Advanced Health Information Technology (CAHIT), Information Technology Services (ITS), the Institutional Review Board (IRB), and the Center for Data Sciences (CDS). This service, while developed to receive data from ResearchKit applications running on iOS mobile devices, could also serve as a backend for other mobile applications for biomedical research, such as RTI\u2019s PHIT application.\nExamples of RTI projects that could use the new capabilities developed by this IR&D project immediately include the following:\n\n\n\n\nEmerging Technology Trends, a FY2016 IR&D project that will build a native iOS app for passive data collection using iBeacon or other sensor standards. \n\n\nDisrupting the cycle of addiction: bringing biomarkers of behavior into better treatment, An RTI Grand Challenge Proposal current being reviewed.\n\n\n\n\n\n\nResearch Objectives\n\n\n\n\n\n\nDevelop the internal capability to design and develop ResearchKit framework apps, and to securely collect the data in an RTI-managed backend data service.\n\n\n\n\n\n\nProvide a platform with known capabilities and costs, increasing bid timeliness and accuracy.\n\n\n\n\n\n\nAssess privacy and security issues within framework of regulatory compliance, addressing these in the system design.\n\n\n\n\n\n\nDevelop effective tools for managing and analyzing the data as they are received from ResearchKit framework apps.\n\n\n\n\n\n\nIncreased RTI's scientific stature within the biomedical research community for having leading-edge data services capability.\n\n\n\n\n\n\nProvide RTI with a commercialization opportunity\n\n\n\n\n\n\n\n\nStatement of Work\n\n\nEach iteration being set based on the full objectives as well as the results of the previous iterations and related stakeholder feedback. \n\n\nThe basic progression of tasks toward goals is listed here.  Note that these activities will be interleaved and concurrent, rather than consecutive.\n\n\nMilestones\n\n\n\n\n\n\n\n\nOctober - January\n\n\nPlanned Activities\n\n\nNotes/Comments\n\n\n\n\n\n\n\n\n\n\nTask 1: Establishment of product definition\n\n\n- Scan competitive landscape.\n - Review target audience needs.\n - Establish feature list and version plan.\n\n\nThe project team will consult CAHIT.\n\n\n\n\n\n\nTask 2: Document requirements for iOS code library\n\n\nDocument technical requirements for the iOS library component.\n\n\n\n\n\n\n\n\nTask 3: Document basic requirements for cloud data service\n\n\nThe project team will consult RTI-ITS and the IRB to develop and document requirements for cloud service providers.\n\n\nAnalysis and requirements gathering for the cloud data service components\n\n\n\n\n\n\nTask 4: Identification of potential cloud provider/partners\n\n\n- Research of provider capabilities, reputation, costs, etc. \n - Develop short list of top provider/partner candidates.\n\n\nThe project team will consult RTI-ITS to review requirements and assess potential cloud service providers. Potential cloud services include IBM Softlayer, Microsoft Azure, and Amazon Web Services\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFebruary - May\n\n\nPlanned Activities\n\n\nNotes/Comments\n\n\n\n\n\n\n\n\n\n\nTask 5: Selection of cloud provider/partner\n\n\n- Scan competitive landscape.\n - Confer with stakeholders, review options and make decision.\n\n\nStakeholders consulted by the project team will include RTI-ITS and the IRB.\n\n\n\n\n\n\nTask 6: Document detailed requirements and design for cloud data service and dashboard UI\n\n\nKnowing provider, develop and document requirements and system design\n\n\n\n\n\n\n\n\nTask 7: Early data service development\n\n\nKick off data service development\n\n\n\n\n\n\n\n\nTask 8: Early dashboard UI development\n\n\nKick off dashboard development\n\n\n\n\n\n\n\n\nTask 9: Development of iOS code library\n\n\nDevelopment and service integration of iOS component\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJune - September\n\n\nPlanned Activities\n\n\nNotes/Comments\n\n\n\n\n\n\n\n\n\n\nTask 10: Data service development\n\n\nDevelopment, testing, demo/pilot planning\n\n\n\n\n\n\n\n\nTask 11: Dashboard UI development\n\n\nDevelopment, testing, demo/pilot planning\n\n\n\n\n\n\n\n\nTask 12: Testing data service integration with iOS components\n\n\nIntegration testing and differential development\n\n\n\n\n\n\n\n\nTask 13: Demo/Pilot of iOS app using data service\n\n\nComplete a demo app using data service integration\n\n\n\n\n\n\n\n\nTask 14: Demo/Pilot of dashboard UI\n\n\nComplete a demo/pilot of dashboard app using service hosted data\n\n\n\n\n\n\n\n\n\n\n\n\nBudget Summary\n\n\nResearch and development hours to support the activities listed above.   \n\n\nThe basic skill categories\n\n\n\n\nSystem analysis and design\n\n\niOS development and publishing\n\n\nCloud service development and operations\n\n\nDashboard UI design and development\n\n\nProject coordination\n\n\n\n\nLabor assignments\n\n\n\n\nAdam Preston, iOS prototype development, cloud services and coordination, 160 hours\n\n\nChris Siege, Data visualization, 60 hours\n\n\nRon Thigpen, Cloud services, analysis and coordination 100 hours\n\n\n\n\nOther Direct Costs (ODCs)\n\n\n\n\nCloud hosting services, $100 / mo X 9 mos\n\n\nSSL security certificate, $50 ea X 1\n\n\nDomain registration, $50 ea X 1\n\n\nDevelopment appliance, $600 ea X 1\n\n\n\n\n\n\nExpected Results\n\n\n\n\nA working pilot data service integrating with ResearchKit apps\n\n\nAn available iOS component library for interaction with our data service\n\n\nA demonstrable app built using the ResearchKit framework, our iOS library, and our data service\n\n\nA small dataset generated with our app\n\n\nDemonstrate a dashboard UI for data management and visual analysis\n\n\n\n\n\n\nSupporting Comments (from management)\n\n\nApple Inc.\u2019s ResearchKit is a new platform for advanced medical research using Apple\u2019s leading edge mobile devices. This platform provides access to more than 40% of smartphone users in the US. Apple\u2019s market share in other developed countries is similar. We should take advantage of this opportunity and add this capability to our existing set of research tools.",
            "title": "Background"
        },
        {
            "location": "/background/#background",
            "text": "Apple iOS currently controls a little over 43% of the US smartphone market, providing access to more than 79 million iPhone users in the US. The ResearchKit platform immediately garnered a great deal of interest within the biomedical research community.     As exciting as this new framework is Apple provided no guidance on how the data collected was to be stored and managed.  This is where the Biomedical Data as a Service Internal Research and Development (IR&D) project comes in.  Designed and implmented by the Research Computing Division, this solution includes the following basic components: an iOS code library, a cloud-based data host, a service layer implementing data exchange application programming interfaces, and a dashboard UI for management.  Instrument developers simply include the iOS library in their IOS application code to connect to the data service via the REST based web API.  Study managers manage their datasets and perform exploratory analytics via the dashboard UI. The system design and implementation incorporates US legal and regulatory compliance with respect to data privacy and security.   Apple launched its ResearchKit framework for iOS on March 9, 2015. ResearchKit is an open source software framework designed to aid in the creation of mobile apps for biomedical and health research. ResearchKit simplifies construction of highly functional apps. Support is provided for various app modules, including informed consent, passive data collection, active tasks, surveys and data dashboards. Apple iOS currently controls a little over 43% of the US smartphone market, providing access to more than 79 million iPhone users in the US. The ResearchKit platform immediately garnered a great deal of interest within the biomedical research community.  Five apps developed with ResearchKit were also released at the debut press event. In March Stanford University researchers found that 11,000 people had signed up for a cardiovascular study using Apple Inc.\u2019s ResearchKit, less than 24 hours after the iPhone tool was introduced. The Michael J. Fox Foundation for Parkinson\u2019s Research collaborated with nonprofit group Sage Bionetworks to develop The Parkinson\u2019s app, which had 5,589 consenting users with 24 hours of launch. These early results suggest a healthy future for biomedical research using data gathered from mobile apps, and for the ResearchKit framework. RCD has already developed a very simple ResearchKit app, but currently has no backend data service to securely receive and manage the data collected. Exhibit 1 is a screenshot of this example app. With our rich capabilities in health research, research data management, statistical analysis, and data sciences, we need to explore the potential of ResearchKit for our business.   Deployed ResearchKit apps generate a great deal of data, presenting operational challenges for researchers.  Given the nature of the data, privacy and security concerns must be addressed with care. The ResearchKit framework provides no specific capabilities for dealing with these data, relying on built-in iOS functions. Apple offers no recommendations or backend service for storing, securing, managing and analyzing the data collected using ResearchKit apps. Researchers seeking to leverage this technology may not be able to easily develop deployable solutions without resolving significant technical challenges.   These challenges represent an opportunity for RTI to step forward with solutions. We propose that RTI build the tools and framework necessary to provide biomedical data management for ResearchKit apps as:   a capability offered to clients in the context of RTI-led biomedical research projects; and  As an RTI-managed service offered to clients conducting their own biomedical research.   The solution would include the following basic components: an iOS code library, a cloud-based data host, a service layer implementing data exchange APIs, and a dashboard UI for management.  Exhibit 2 is a simplified diagram showing the flow of data between ReseachKit applications, the proposed backend data service, and researchers. Implementers would include the iOS library in their app code, and connect to our data host via the service APIs.  Users would manage their datasets and perform exploratory analytics via the dashboard UI. The system design and implementation would incorporate US legal and regulatory compliance with respect to data privacy and security.    This project would build and demonstrate the feasibility of a service designed to gather and help analyze biomedical data from users of mobile apps developed using ResearchKit. This new capability would be a logical extension and modernization of our existing biomedical data collection, management, and research business. RTI currently cannot offer this capability to clients. \nThis new service will leverage the experience skills of our staff in research data center technologies and operations (e.g. research protocol design and oversight, human subjects research, data privacy and security, data collection and management, statistical analysis, data visualization), and should help generate business in those areas. In developing this service the project team will consult the RTI Center for Advanced Health Information Technology (CAHIT), Information Technology Services (ITS), the Institutional Review Board (IRB), and the Center for Data Sciences (CDS). This service, while developed to receive data from ResearchKit applications running on iOS mobile devices, could also serve as a backend for other mobile applications for biomedical research, such as RTI\u2019s PHIT application.\nExamples of RTI projects that could use the new capabilities developed by this IR&D project immediately include the following:   Emerging Technology Trends, a FY2016 IR&D project that will build a native iOS app for passive data collection using iBeacon or other sensor standards.   Disrupting the cycle of addiction: bringing biomarkers of behavior into better treatment, An RTI Grand Challenge Proposal current being reviewed.    Research Objectives    Develop the internal capability to design and develop ResearchKit framework apps, and to securely collect the data in an RTI-managed backend data service.    Provide a platform with known capabilities and costs, increasing bid timeliness and accuracy.    Assess privacy and security issues within framework of regulatory compliance, addressing these in the system design.    Develop effective tools for managing and analyzing the data as they are received from ResearchKit framework apps.    Increased RTI's scientific stature within the biomedical research community for having leading-edge data services capability.    Provide RTI with a commercialization opportunity     Statement of Work  Each iteration being set based on the full objectives as well as the results of the previous iterations and related stakeholder feedback.   The basic progression of tasks toward goals is listed here.  Note that these activities will be interleaved and concurrent, rather than consecutive.  Milestones     October - January  Planned Activities  Notes/Comments      Task 1: Establishment of product definition  - Scan competitive landscape.  - Review target audience needs.  - Establish feature list and version plan.  The project team will consult CAHIT.    Task 2: Document requirements for iOS code library  Document technical requirements for the iOS library component.     Task 3: Document basic requirements for cloud data service  The project team will consult RTI-ITS and the IRB to develop and document requirements for cloud service providers.  Analysis and requirements gathering for the cloud data service components    Task 4: Identification of potential cloud provider/partners  - Research of provider capabilities, reputation, costs, etc.   - Develop short list of top provider/partner candidates.  The project team will consult RTI-ITS to review requirements and assess potential cloud service providers. Potential cloud services include IBM Softlayer, Microsoft Azure, and Amazon Web Services        February - May  Planned Activities  Notes/Comments      Task 5: Selection of cloud provider/partner  - Scan competitive landscape.  - Confer with stakeholders, review options and make decision.  Stakeholders consulted by the project team will include RTI-ITS and the IRB.    Task 6: Document detailed requirements and design for cloud data service and dashboard UI  Knowing provider, develop and document requirements and system design     Task 7: Early data service development  Kick off data service development     Task 8: Early dashboard UI development  Kick off dashboard development     Task 9: Development of iOS code library  Development and service integration of iOS component         June - September  Planned Activities  Notes/Comments      Task 10: Data service development  Development, testing, demo/pilot planning     Task 11: Dashboard UI development  Development, testing, demo/pilot planning     Task 12: Testing data service integration with iOS components  Integration testing and differential development     Task 13: Demo/Pilot of iOS app using data service  Complete a demo app using data service integration     Task 14: Demo/Pilot of dashboard UI  Complete a demo/pilot of dashboard app using service hosted data       Budget Summary  Research and development hours to support the activities listed above.     The basic skill categories   System analysis and design  iOS development and publishing  Cloud service development and operations  Dashboard UI design and development  Project coordination   Labor assignments   Adam Preston, iOS prototype development, cloud services and coordination, 160 hours  Chris Siege, Data visualization, 60 hours  Ron Thigpen, Cloud services, analysis and coordination 100 hours   Other Direct Costs (ODCs)   Cloud hosting services, $100 / mo X 9 mos  SSL security certificate, $50 ea X 1  Domain registration, $50 ea X 1  Development appliance, $600 ea X 1    Expected Results   A working pilot data service integrating with ResearchKit apps  An available iOS component library for interaction with our data service  A demonstrable app built using the ResearchKit framework, our iOS library, and our data service  A small dataset generated with our app  Demonstrate a dashboard UI for data management and visual analysis    Supporting Comments (from management)  Apple Inc.\u2019s ResearchKit is a new platform for advanced medical research using Apple\u2019s leading edge mobile devices. This platform provides access to more than 40% of smartphone users in the US. Apple\u2019s market share in other developed countries is similar. We should take advantage of this opportunity and add this capability to our existing set of research tools.",
            "title": "Background"
        },
        {
            "location": "/governance/",
            "text": "Governance\n\n\nIn recognition of the importance of keeping Protected Health Information (PHI) secure, RTI has implemented all applicable requirements of the Health Insurance Portability and Accountability Act of 1996 (HIPAA), including the Omnibus Rule enacted in 2013. As a Hybrid Entity, RTI places great importance on the effective operation of HIPAA Privacy, Security, Breach Notification and Enforcement Rules including the privacy and security provisions of the Health Information Technology for Economic and Clinical Health Act (HITECH Act) to protect PHI.\nRTI has designated both HIPAA Security and Privacy Officers to review and ensure compliance with HIPAA regulations. These experienced professionals are experts in their field in implementing and monitoring robust policies, procedures, and IT environments that ensure the protection of PHI.\n\n\nIn addition, RTI\u2019s HIPAA environment meets all administrative, physical, and technical security standards, as well as policy, procedure, and documentation safeguard standards, including minimum necessary access requirements, active log monitoring, and robust training.  To protect our reputation as an industry leader, RTI places great importance on maintaining the highest standards of confidentiality, integrity, and availability for our clients\u2019 data subject to the HIPAA standards.\n\n\nRTI\u2019s FIPS (Federal Information Processing Standards) risk compliant infrastructure represents a notable strength for RTI in managing client projects. RTI\u2019s network meets all National Institute of Standards and Technology (NIST) confidentiality, integrity, and availability security standards for the FIPS low or moderate risk, allowing RTI to provide the appropriate level of security for the information, including personally identifiable information (PII) and Protected Health Information (PHI).",
            "title": "Governance"
        },
        {
            "location": "/governance/#governance",
            "text": "In recognition of the importance of keeping Protected Health Information (PHI) secure, RTI has implemented all applicable requirements of the Health Insurance Portability and Accountability Act of 1996 (HIPAA), including the Omnibus Rule enacted in 2013. As a Hybrid Entity, RTI places great importance on the effective operation of HIPAA Privacy, Security, Breach Notification and Enforcement Rules including the privacy and security provisions of the Health Information Technology for Economic and Clinical Health Act (HITECH Act) to protect PHI.\nRTI has designated both HIPAA Security and Privacy Officers to review and ensure compliance with HIPAA regulations. These experienced professionals are experts in their field in implementing and monitoring robust policies, procedures, and IT environments that ensure the protection of PHI.  In addition, RTI\u2019s HIPAA environment meets all administrative, physical, and technical security standards, as well as policy, procedure, and documentation safeguard standards, including minimum necessary access requirements, active log monitoring, and robust training.  To protect our reputation as an industry leader, RTI places great importance on maintaining the highest standards of confidentiality, integrity, and availability for our clients\u2019 data subject to the HIPAA standards.  RTI\u2019s FIPS (Federal Information Processing Standards) risk compliant infrastructure represents a notable strength for RTI in managing client projects. RTI\u2019s network meets all National Institute of Standards and Technology (NIST) confidentiality, integrity, and availability security standards for the FIPS low or moderate risk, allowing RTI to provide the appropriate level of security for the information, including personally identifiable information (PII) and Protected Health Information (PHI).",
            "title": "Governance"
        },
        {
            "location": "/api/",
            "text": "Token Authenticate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nObtain a token given a username and password. Subsequently, this token is used to authenticate all requests using the following authorization HTTP header \nAuthorization: Token [TOKEN_ID]\n\n\n\n\n\n\nEndpoint\n\n\n/api-token-auth/\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nAuthentication\n\n\nNone\n\n\n\n\n\n\nResponse Codes\n\n\n200 - Successful\n401 - Unauthorized \n400 - Bad Request\n\n\n\n\n\n\n\n\nRequest Object\n\n\n{   \n    \"username\":\"participant\",\n    \"password\":\"aadfadfdf\"\n}\n\n\n\n\nResponse Object\n\n\n{\n    \"token\": \"ffc0479b0021eed19271d51a803558e7d10ff286\"\n}\n\n\n\n\nParticipant\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet study participants.\n\n\n\n\n\n\nEndpoint\n\n\n/participant/\n\n\n\n\n\n\nMethod\n\n\nGET\n\n\n\n\n\n\nPagination\n\n\nLimit Offset: This pagination style mirrors the syntax used when looking up multiple database records. The client includes both a \nlimit\n and an \noffset\n query parameter. The limit indicates the maximum number of items to return, and defaults to 20 records. The offset indicates the starting position of the query in relation to the complete set of unpaginated items.\n\n\n\n\n\n\nAuthentication\n\n\nToken\n\n\n\n\n\n\nResponse Codes\n\n\n200 - Sucessful\n401 - Unauthorized \n400 - Bad Request\n\n\n\n\n\n\n\n\nResponse Object\n\n\n{\n  \"count\": 20,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"username\": \"testuser0\",\n      \"first_name\": \"Chris\",\n      \"last_name\": \"Smith\",\n      \"email\": \"fakeemail@rti.org\",\n      \"gender\": \"Male\",\n      \"dob\": \"1971-09-04\"\n    },\n    {\n      \"username\": \"testuser1\",\n      \"first_name\": \"Sue\",\n      \"last_name\": \"Smith\",\n      \"email\": \"fakeemail@rti.org\",\n      \"gender\": \"Female\",\n      \"dob\": \"1983-03-04\"\n    },\n    ...\n    ]\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nEnroll a study participant.\n\n\n\n\n\n\nEndpoint\n\n\n/participant/\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nAuthentication\n\n\nNone\n\n\n\n\n\n\nResponse Codes\n\n\n200 - Sucessful\n401 - Unauthorized \n400 - Bad Request\n403 - Forbidden\n\n\n\n\n\n\n\n\nRequest Object\n\n\n{   \n    \"username\":\"joeschmoe\",\n    \"password\":\"secretpassword\",\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Doe\",\n    \"email\": \"joe@gmail.com\",\n    \"gender\": \"Male\",\n    \"dob\": \"9/15/1985\"\n}\n\n\n\n\n\nParticipant Consent\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nEstablishes user consent to use submitted data within a scope (to be defined by study)\n\n\n\n\n\n\nEndpoint\n\n\n/consent/\n\n\n\n\n\n\nMethod\n\n\nPOST, PUT\n\n\n\n\n\n\nAuthentication\n\n\nToken\n\n\n\n\n\n\nResponse Codes\n\n\n200 - Sucessful\n401 - Unauthorized \n400 - Bad Request\n\n\n\n\n\n\n\n\nRequest Object\n\n\n{   \n    \"imageData\":\"aadfadfdfadfadfafasdfas\", // signature image\n    \"scope\": \"no_sharing\"\n}\n\n\n\n\nSurvey Submission\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nSubmit a survey response.\n\n\n\n\n\n\nEndpoint\n\n\n/submission/\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nAuthentication\n\n\nToken\n\n\n\n\n\n\nResponse Codes\n\n\n200 - Sucessful\n401 - Unauthorized \n400 - Bad Request\n\n\n\n\n\n\n\n\nRequest Object\n\n\n{   \n\n    \"time_start\": \"2015-12-17T18:52:49.963458Z\",\n    \"time_complete\": \"2015-12-17T18:52:49.963458Z\",\n    \"device_id\": \"ED2B101F-CC55-46FF-BEE5-60CC32EEC6C9\",\n    \"lat\": \"40.5895466\",\n    \"long\": \"-105.0751243\",\n    \"response\": {\n        \"mood category\": \"fine\",\n        \"mood scale\": \"8\",\n        \"mood image\": \"3\"\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nGet survey submissions.\n\n\n\n\n\n\nEndpoint\n\n\n/submission/\n\n\n\n\n\n\nMethod\n\n\nGET\n\n\n\n\n\n\nPagination\n\n\nLimit Offset: This pagination style mirrors the syntax used when looking up multiple database records. The client includes both a \nlimit\n and an \noffset\n query parameter. The limit indicates the maximum number of items to return, and defaults to 20 records. The offset indicates the starting position of the query in relation to the complete set of unpaginated items.\n\n\n\n\n\n\nAuthentication\n\n\nToken\n\n\n\n\n\n\nResponse Codes\n\n\n200 - Sucessful\n401 - Unauthorized \n400 - Bad Request\n\n\n\n\n\n\n\n\nResponse Object\n\n\n{\n  \"count\": 105,\n  \"next\": \"http://localhost:8000/submission/?limit=20&offset=20\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 23,\n      \"participant\": {\n        \"username\": \"testuser0\",\n        \"email\": \"fakeemail@rti.org\",\n        \"first_name\": \"Piper\",\n        \"last_name\": \"Walters\",\n        \"gender\": \"Male\",\n        \"dob\": \"1984-05-23\"\n      },\n      \"time_start\": \"2016-03-30T20:54:17.142617Z\",\n      \"time_complete\": \"2016-03-30T20:54:17.142632Z\",\n      \"timestamp\": \"2016-03-30T20:54:17.164977Z\",\n      \"device_id\": \"TEST-49D5-4CAD-AE42-E5CE922A3346\",\n      \"response\": {\n        \"mood image\": \"6\",\n        \"mood cateogry\": \"fine\",\n        \"mood scale\": \"2\"\n      },\n      \"lat\": 45.5423508,\n      \"long\": -122.7945071,\n      \"place\": \"Portland, OR US\"\n    },\n    {\n      \"id\": 24,\n      \"participant\": {\n        \"username\": \"testuser0\",\n        \"email\": \"fakeemail@rti.org\",\n        \"first_name\": \"Piper\",\n        \"last_name\": \"Walters\",\n        \"gender\": \"Male\",\n        \"dob\": \"1984-05-23\"\n      },\n      \"time_start\": \"2016-03-30T20:54:17.291626Z\",\n      \"time_complete\": \"2016-03-30T20:54:17.291638Z\",\n      \"timestamp\": \"2016-03-30T20:54:17.292202Z\",\n      \"device_id\": \"TEST-49D5-4CAD-AE42-E5CE922A3346\",\n      \"response\": {\n        \"mood image\": \"9\",\n        \"mood cateogry\": \"good\",\n        \"mood scale\": \"7\"\n      },\n      \"lat\": 39.1490189,\n      \"long\": -107.1444289,\n      \"place\": \"Marble, CO US\"\n    },\n    ...\n    ]\n}\n\n\n\n\n\nIf you are feeling adventurous, try running this in \nPostman\n.",
            "title": "API"
        },
        {
            "location": "/api/#token-authenticate",
            "text": "Description  Obtain a token given a username and password. Subsequently, this token is used to authenticate all requests using the following authorization HTTP header  Authorization: Token [TOKEN_ID]    Endpoint  /api-token-auth/    Method  POST    Authentication  None    Response Codes  200 - Successful 401 - Unauthorized  400 - Bad Request     Request Object  {   \n    \"username\":\"participant\",\n    \"password\":\"aadfadfdf\"\n}  Response Object  {\n    \"token\": \"ffc0479b0021eed19271d51a803558e7d10ff286\"\n}",
            "title": "Token Authenticate"
        },
        {
            "location": "/api/#participant",
            "text": "Description  Get study participants.    Endpoint  /participant/    Method  GET    Pagination  Limit Offset: This pagination style mirrors the syntax used when looking up multiple database records. The client includes both a  limit  and an  offset  query parameter. The limit indicates the maximum number of items to return, and defaults to 20 records. The offset indicates the starting position of the query in relation to the complete set of unpaginated items.    Authentication  Token    Response Codes  200 - Sucessful 401 - Unauthorized  400 - Bad Request     Response Object  {\n  \"count\": 20,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"username\": \"testuser0\",\n      \"first_name\": \"Chris\",\n      \"last_name\": \"Smith\",\n      \"email\": \"fakeemail@rti.org\",\n      \"gender\": \"Male\",\n      \"dob\": \"1971-09-04\"\n    },\n    {\n      \"username\": \"testuser1\",\n      \"first_name\": \"Sue\",\n      \"last_name\": \"Smith\",\n      \"email\": \"fakeemail@rti.org\",\n      \"gender\": \"Female\",\n      \"dob\": \"1983-03-04\"\n    },\n    ...\n    ]\n}           Description  Enroll a study participant.    Endpoint  /participant/    Method  POST    Authentication  None    Response Codes  200 - Sucessful 401 - Unauthorized  400 - Bad Request 403 - Forbidden     Request Object  {   \n    \"username\":\"joeschmoe\",\n    \"password\":\"secretpassword\",\n    \"first_name\": \"Jane\",\n    \"last_name\": \"Doe\",\n    \"email\": \"joe@gmail.com\",\n    \"gender\": \"Male\",\n    \"dob\": \"9/15/1985\"\n}",
            "title": "Participant"
        },
        {
            "location": "/api/#participant-consent",
            "text": "Description  Establishes user consent to use submitted data within a scope (to be defined by study)    Endpoint  /consent/    Method  POST, PUT    Authentication  Token    Response Codes  200 - Sucessful 401 - Unauthorized  400 - Bad Request     Request Object  {   \n    \"imageData\":\"aadfadfdfadfadfafasdfas\", // signature image\n    \"scope\": \"no_sharing\"\n}",
            "title": "Participant Consent"
        },
        {
            "location": "/api/#survey-submission",
            "text": "Description  Submit a survey response.    Endpoint  /submission/    Method  POST    Authentication  Token    Response Codes  200 - Sucessful 401 - Unauthorized  400 - Bad Request     Request Object  {   \n\n    \"time_start\": \"2015-12-17T18:52:49.963458Z\",\n    \"time_complete\": \"2015-12-17T18:52:49.963458Z\",\n    \"device_id\": \"ED2B101F-CC55-46FF-BEE5-60CC32EEC6C9\",\n    \"lat\": \"40.5895466\",\n    \"long\": \"-105.0751243\",\n    \"response\": {\n        \"mood category\": \"fine\",\n        \"mood scale\": \"8\",\n        \"mood image\": \"3\"\n    }\n\n}           Description  Get survey submissions.    Endpoint  /submission/    Method  GET    Pagination  Limit Offset: This pagination style mirrors the syntax used when looking up multiple database records. The client includes both a  limit  and an  offset  query parameter. The limit indicates the maximum number of items to return, and defaults to 20 records. The offset indicates the starting position of the query in relation to the complete set of unpaginated items.    Authentication  Token    Response Codes  200 - Sucessful 401 - Unauthorized  400 - Bad Request     Response Object  {\n  \"count\": 105,\n  \"next\": \"http://localhost:8000/submission/?limit=20&offset=20\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 23,\n      \"participant\": {\n        \"username\": \"testuser0\",\n        \"email\": \"fakeemail@rti.org\",\n        \"first_name\": \"Piper\",\n        \"last_name\": \"Walters\",\n        \"gender\": \"Male\",\n        \"dob\": \"1984-05-23\"\n      },\n      \"time_start\": \"2016-03-30T20:54:17.142617Z\",\n      \"time_complete\": \"2016-03-30T20:54:17.142632Z\",\n      \"timestamp\": \"2016-03-30T20:54:17.164977Z\",\n      \"device_id\": \"TEST-49D5-4CAD-AE42-E5CE922A3346\",\n      \"response\": {\n        \"mood image\": \"6\",\n        \"mood cateogry\": \"fine\",\n        \"mood scale\": \"2\"\n      },\n      \"lat\": 45.5423508,\n      \"long\": -122.7945071,\n      \"place\": \"Portland, OR US\"\n    },\n    {\n      \"id\": 24,\n      \"participant\": {\n        \"username\": \"testuser0\",\n        \"email\": \"fakeemail@rti.org\",\n        \"first_name\": \"Piper\",\n        \"last_name\": \"Walters\",\n        \"gender\": \"Male\",\n        \"dob\": \"1984-05-23\"\n      },\n      \"time_start\": \"2016-03-30T20:54:17.291626Z\",\n      \"time_complete\": \"2016-03-30T20:54:17.291638Z\",\n      \"timestamp\": \"2016-03-30T20:54:17.292202Z\",\n      \"device_id\": \"TEST-49D5-4CAD-AE42-E5CE922A3346\",\n      \"response\": {\n        \"mood image\": \"9\",\n        \"mood cateogry\": \"good\",\n        \"mood scale\": \"7\"\n      },\n      \"lat\": 39.1490189,\n      \"long\": -107.1444289,\n      \"place\": \"Marble, CO US\"\n    },\n    ...\n    ]\n}  If you are feeling adventurous, try running this in  Postman .",
            "title": "Survey Submission"
        },
        {
            "location": "/specifications/",
            "text": "Application Architecture\n\n\nTo maximize portability, the entire Researchnet application stack has been \"containerized\" with \ndocker\n.  Currently there are three containers including the Python Django web application, the PostgresSQl database, and the NGINX proxy server.  As a configuration option the database be run as a separate service by overriding the database connection information in the Django settings.\n\n\nThe following diagram depicts a typical process flow.  Starting with the onboarding, the user initiates account creation, which ultimately results in a fully provisioned study participant. Once the study participant subsequently logs in, they receive a non-expiring token which is required for all further interactions including submitting survey responses and authorizing study consent.\n\n\n\n\nData Model\n\n\nResearchnet extends the Django User Model to support an entity called the 'Participant' which serves as the study participant.  See the \ndata model diagram\n for more information.\n\n\nDeployment\n\n\nCurrently we are working towards a HIPAA compliant configuration on Amazon Web Services (AWS).",
            "title": "Technical Specifications"
        },
        {
            "location": "/specifications/#application-architecture",
            "text": "To maximize portability, the entire Researchnet application stack has been \"containerized\" with  docker .  Currently there are three containers including the Python Django web application, the PostgresSQl database, and the NGINX proxy server.  As a configuration option the database be run as a separate service by overriding the database connection information in the Django settings.  The following diagram depicts a typical process flow.  Starting with the onboarding, the user initiates account creation, which ultimately results in a fully provisioned study participant. Once the study participant subsequently logs in, they receive a non-expiring token which is required for all further interactions including submitting survey responses and authorizing study consent.",
            "title": "Application Architecture"
        },
        {
            "location": "/specifications/#data-model",
            "text": "Researchnet extends the Django User Model to support an entity called the 'Participant' which serves as the study participant.  See the  data model diagram  for more information.",
            "title": "Data Model"
        },
        {
            "location": "/specifications/#deployment",
            "text": "Currently we are working towards a HIPAA compliant configuration on Amazon Web Services (AWS).",
            "title": "Deployment"
        }
    ]
}